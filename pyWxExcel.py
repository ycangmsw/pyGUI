#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.1 on Tue Mar  5 21:40:02 2019
#

#import wx
import wx.grid
import os
import platform
import copy
#from wx import FD_OPEN
from ClassExcel import BaseClassExcel

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

# 非标台账表
class NonStandard(BaseClassExcel):
    strFILENAME = "2018非标台账.xlsx" 
    list_global = [] # 存储list_table用做全局  
    def __init__(self,filename,START_ROW=3,START_COL=0):
        BaseClassExcel.__init__(self,filename)
        self.FILENAME = filename
        self.STARTROW = START_ROW
        self.STARTCOL = START_COL
        self.list_row = [] # 记录excel表每行的内容
        self.list_table = [] # 保存一个sheet的表内容
        self.list_sheet_name = [] # 保存一个excel文件的所有sheet名
        
# end of class NonStandar

# 生产安装表
# 确定发货日期
class Send(BaseClassExcel):
    strFILENAME = "生产、安装报表.xlsx" 
    strSHEETNAME = "订单一览表"   # 需要从list_sheet_name中去除的单元
    
    def __init__(self,filename,START_ROW=2,START_COL=0):
        BaseClassExcel.__init__(self,filename)
        self.FILENAME = filename
        self.STARTROW = START_ROW
        self.STARTCOL = START_COL
        self.list_row = [] # 记录excel表每行的内容
        self.list_table = []  # 保存一个sheet表内容
        self.list_grid = []  # 保存写入grid控件的表
        self.list_sheet_name = [] # 保存一个excel文件的所有sheet名
        
# end of class Send

# 安装奖统计表
# 确定项目结束日期
class Prize(BaseClassExcel):
    strFILENAME = "安装奖统计.xlsx" 
    list_SHEETNAME = [ "2016" , "问题单据处理" , "2017整改" , "总表" ,"17.1月","17.2月","17.3月","17.4月","17.5月","17.6月","17.7月","17.8月","17.9月","17.10","17.11月","2017.12月"]   # 需从 list_sheet_name 中取出的单元
   
    def __init__( self , filename , START_ROW=2 , START_COL=0 ):
        BaseClassExcel.__init__( self , filename )
        self.FILENAME = filename
        self.STARTROW = START_ROW
        self.STARTCOL = START_COL
        self.list_row = [] # 记录excel表每行的内容
        self.list_table = [] # 保存一个sheet的表内容
        self.list_grid = [] # 保存写入grid控件的表
        self.list_sheet_name = [] # 保存一个excel文件的所有sheet名
        
# end of class Prize

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((868, 652))
        self.sizer_top_notebook = wx.Notebook(self, wx.ID_ANY)
        self.pane_nonstandar = wx.Panel(self.sizer_top_notebook, wx.ID_ANY)
        self.txtNonStandar = wx.TextCtrl(self.pane_nonstandar, wx.ID_ANY, u"输入非标台帐表路径")
        self.btnNonStandar = wx.Button(self.pane_nonstandar, wx.ID_ANY, u"选择文件")
        self.btnNonStandarW = wx.Button(self.pane_nonstandar, wx.ID_ANY, u"写入表格")
        self.txtNonStandarShow = wx.TextCtrl(self.pane_nonstandar, wx.ID_ANY, u"显示单元格内容")
        self.gridNonStandar = wx.grid.Grid(self.pane_nonstandar, wx.ID_ANY, size=(1, 1))
        self.pane_send = wx.Panel(self.sizer_top_notebook, wx.ID_ANY)
        self.txtSend = wx.TextCtrl(self.pane_send, wx.ID_ANY, u"输入生产、安装表路径")
        self.btnSend = wx.Button(self.pane_send, wx.ID_ANY, u"选择文件")
        self.btnSendW = wx.Button(self.pane_send, wx.ID_ANY, u"写入台账表")
        self.txtSendShow = wx.TextCtrl(self.pane_send, wx.ID_ANY, u"显示单元格内容")
        self.gridSend = wx.grid.Grid(self.pane_send, wx.ID_ANY, size=(1, 1))
        self.pane_prize = wx.Panel(self.sizer_top_notebook, wx.ID_ANY)
        self.txtPrize = wx.TextCtrl(self.pane_prize, wx.ID_ANY, u"输入安装奖统计表路径")
        self.btnPrize = wx.Button(self.pane_prize, wx.ID_ANY, u"选择文件")
        self.btnPrizeW = wx.Button(self.pane_prize, wx.ID_ANY, u"写入台账表")
        self.txtPrizeShow = wx.TextCtrl(self.pane_prize, wx.ID_ANY, u"显示单元格内容")
        self.gridPrize = wx.grid.Grid(self.pane_prize, wx.ID_ANY, size=(1, 1))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.txtNonStandar_OnChange, self.txtNonStandar)
        self.Bind(wx.EVT_BUTTON, self.btnNonStandar_Down, self.btnNonStandar)
        self.Bind(wx.EVT_BUTTON, self.btnNonStandar_DownW, self.btnNonStandarW)
        self.Bind(wx.grid.EVT_GRID_CELL_LEFT_CLICK,self.gridNonStandar_OnClick,self.gridNonStandar)
        self.Bind(wx.EVT_TEXT, self.txtSend_OnChange, self.txtSend)
        self.Bind(wx.EVT_BUTTON, self.btnSend_Down, self.btnSend)
        self.Bind(wx.EVT_BUTTON, self.btnSend_DownW, self.btnSendW)
        self.Bind(wx.grid.EVT_GRID_CELL_LEFT_CLICK,self.gridSend_OnClick,self.gridSend)
        self.Bind(wx.EVT_TEXT, self.txtPrize_OnChange, self.txtPrize)
        self.Bind(wx.EVT_BUTTON, self.btnPrize_Down, self.btnPrize)
        self.Bind(wx.EVT_BUTTON, self.btnPrize_DownW, self.btnPrizeW)
        self.Bind(wx.grid.EVT_GRID_CELL_LEFT_CLICK,self.gridPrize_OnClick,self.gridPrize)
        # end wxGlade
        
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(u"非标台帐")
        self.txtNonStandar.SetMinSize((260, 32))
        self.btnNonStandar.SetMinSize((80, 32))
        self.btnNonStandarW.SetMinSize((80, 32))
        self.txtNonStandarShow.SetMinSize((520,30))
        self.gridNonStandar.CreateGrid(1, 17)
        self.gridNonStandar.SetColLabelValue(0, u"序号")
        self.gridNonStandar.SetColLabelValue(1, u"受理日期")
        self.gridNonStandar.SetColLabelValue(2, u"订单号")
        self.gridNonStandar.SetColLabelValue(3, u"销售经理")
        self.gridNonStandar.SetColLabelValue(4, u"产品品名")
        self.gridNonStandar.SetColLabelValue(5, u"规格型号")
        self.gridNonStandar.SetColLabelValue(6, u"适用机型")
        self.gridNonStandar.SetColLabelValue(7, u"数量")
        self.gridNonStandar.SetColLabelValue(8, u"要求完工时间")
        self.gridNonStandar.SetColSize(8, 120)
        self.gridNonStandar.SetColLabelValue(9, u"勘察负责人")
        self.gridNonStandar.SetColLabelValue(10, u"勘察日期")
        self.gridNonStandar.SetColLabelValue(11, u"技术方案负责人")
        self.gridNonStandar.SetColSize(11, 120)
        self.gridNonStandar.SetColLabelValue(12, u"技术执行时间")
        self.gridNonStandar.SetColSize(12, 120)
        self.gridNonStandar.SetColLabelValue(13, u"硬件选型负责人")
        self.gridNonStandar.SetColSize(13, 120)
        self.gridNonStandar.SetColLabelValue(14, u"硬件选型执行时间")
        self.gridNonStandar.SetColSize(14, 120)
        self.gridNonStandar.SetColLabelValue(15, u"项目完工时间")
        self.gridNonStandar.SetColSize(15, 120)
        self.gridNonStandar.SetColLabelValue(16, u"发货时间")
        self.txtSend.SetMinSize((260, 32))
        self.btnSend.SetMinSize((80, 32))
        self.btnSendW.SetMinSize((80, 32))
        self.txtSendShow.SetMinSize((520, 30))
        self.gridSend.CreateGrid(1, 22)
        self.gridSend.SetColLabelValue(0, u"Sheet名")
        self.gridSend.SetColLabelValue(1, u"序号")
        self.gridSend.SetColLabelValue(2, u"受理日期")
        self.gridSend.SetColLabelValue(3, u"销售订单号")
        self.gridSend.SetColLabelValue(4, u"非标or标配")
        self.gridSend.SetColLabelValue(5, u"销售经理")
        self.gridSend.SetColLabelValue(6, u" 产品")
        self.gridSend.SetColLabelValue(7,u"是否需要接入后台")
        self.gridSend.SetColSize(7, 120)
        self.gridSend.SetColLabelValue(8, u"机型")
        self.gridSend.SetColLabelValue(9, u"数量")
        self.gridSend.SetColLabelValue(10, u"计划发货时间")
        self.gridSend.SetColSize(10, 100)
        self.gridSend.SetColLabelValue(11, u"采购接单时间")
        self.gridSend.SetColSize(11, 100)
        self.gridSend.SetColLabelValue(12, u"采购齐套时间")
        self.gridSend.SetColSize(12, 100)
        self.gridSend.SetColLabelValue(13, u"生产开工时间")
        self.gridSend.SetColSize(13, 100)
        self.gridSend.SetColLabelValue(14, u"生产完工时间")
        self.gridSend.SetColSize(14, 100)
        self.gridSend.SetColLabelValue(15, u"软件承接开工时间")
        self.gridSend.SetColSize(15, 120)
        self.gridSend.SetColLabelValue(16, u"软件承接完工时间")
        self.gridSend.SetColSize(16, 120)
        self.gridSend.SetColLabelValue(17, u"软件承接人")
        self.gridSend.SetColSize(17, 100)
        self.gridSend.SetColLabelValue(18, u"质检开始时间")
        self.gridSend.SetColSize(18, 100)
        self.gridSend.SetColLabelValue(19, u"入库时间")
        self.gridSend.SetColLabelValue(20, u"发货时间")
        self.gridSend.SetColLabelValue(21, u"备注")
        self.txtPrize.SetMinSize((260, 32))
        self.btnPrize.SetMinSize((80, 32))
        self.btnPrizeW.SetMinSize((80, 32))
        self.txtPrizeShow.SetMinSize((520, 30))
        self.gridPrize.CreateGrid(1, 16)
        self.gridPrize.SetColLabelValue(0, u"Sheet名")
        self.gridPrize.SetColLabelValue(1, u"序号")
        self.gridPrize.SetColLabelValue(2, u"安装人员")
        self.gridPrize.SetColLabelValue(3, u"生产任务单号")
        self.gridPrize.SetColSize(3, 100)
        self.gridPrize.SetColLabelValue(4, u"用户名称")
        self.gridPrize.SetColLabelValue(5, u"安装地点")
        self.gridPrize.SetColLabelValue(6, u"安装日期")
        self.gridPrize.SetColLabelValue(7, u"验收日期")
        self.gridPrize.SetColLabelValue(8, u"销售人员")
        self.gridPrize.SetColLabelValue(9, u"安装产品")
        self.gridPrize.SetColLabelValue(10, u"起重机类型")
        self.gridPrize.SetColSize(10, 100)
        self.gridPrize.SetColLabelValue(11, u"数量")
        self.gridPrize.SetColLabelValue(12, u"取力方式")
        self.gridPrize.SetColLabelValue(13, u"安装天数")
        self.gridPrize.SetColLabelValue(14, u"安装奖励")
        self.gridPrize.SetColLabelValue(15, u"备注")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_top = wx.BoxSizer(wx.HORIZONTAL)
        sizer_prize = wx.BoxSizer(wx.VERTICAL)
        sizer_grid_prize = wx.BoxSizer(wx.HORIZONTAL)
        sizer_prize_lab = wx.BoxSizer(wx.HORIZONTAL)
        sizer_send = wx.BoxSizer(wx.VERTICAL)
        sizer_grid_send = wx.BoxSizer(wx.HORIZONTAL)
        sizer_lab = wx.BoxSizer(wx.HORIZONTAL)
        sizer_nonstandar = wx.BoxSizer(wx.VERTICAL)
        sizer_grid_nonstandar = wx.BoxSizer(wx.HORIZONTAL)
        sizer_nonstandar_lab = wx.BoxSizer(wx.HORIZONTAL)
        labNonStandar = wx.StaticText(self.pane_nonstandar, wx.ID_ANY, u"文件路径：")
        labNonStandar.SetMinSize((75, 28))
        labNonStandar.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_nonstandar_lab.Add(labNonStandar, 0, wx.ALIGN_CENTER | wx.ALL, 1)
        sizer_nonstandar_lab.Add(self.txtNonStandar, 0, 0, 0)
        sizer_nonstandar_lab.Add(self.btnNonStandar, 0, 0, 0)
        sizer_nonstandar_lab.Add(self.btnNonStandarW, 0, 0, 0)
        sizer_nonstandar_lab.Add(self.txtNonStandarShow, 0, 0, 0)
        sizer_nonstandar_lab.Add((80, 34), 1, 0, 0)
        sizer_nonstandar.Add(sizer_nonstandar_lab, 1, wx.EXPAND, 0)
        sizer_grid_nonstandar.Add(self.gridNonStandar, 1, wx.EXPAND, 0)
        sizer_nonstandar.Add(sizer_grid_nonstandar, 20, wx.EXPAND, 0)
        self.pane_nonstandar.SetSizer(sizer_nonstandar)
        labSend = wx.StaticText(self.pane_send, wx.ID_ANY, u"文件路径：")
        labSend.SetMinSize((75, 28))
        labSend.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_lab.Add(labSend, 0, wx.ALIGN_CENTER | wx.ALL, 1)
        sizer_lab.Add(self.txtSend, 0, 0, 0)
        sizer_lab.Add(self.btnSend, 0, 0, 0)
        sizer_lab.Add(self.btnSendW, 0, 0, 0)
        sizer_lab.Add(self.txtSendShow,0,0,0)
        sizer_lab.Add((80, 34), 1, 0, 0)
        sizer_send.Add(sizer_lab, 1, wx.EXPAND, 0)
        sizer_grid_send.Add(self.gridSend, 1, wx.EXPAND, 0)
        sizer_send.Add(sizer_grid_send, 18, wx.EXPAND, 0)
        self.pane_send.SetSizer(sizer_send)
        labPrize = wx.StaticText(self.pane_prize, wx.ID_ANY, u"文件路径:")
        labPrize.SetMinSize((75, 28))
        labPrize.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_prize_lab.Add(labPrize, 0, wx.ALIGN_CENTER | wx.ALL, 1)
        sizer_prize_lab.Add(self.txtPrize, 0, 0, 0)
        sizer_prize_lab.Add(self.btnPrize, 0, 0, 0)
        sizer_prize_lab.Add(self.btnPrizeW, 0, 0, 0)
        sizer_prize_lab.Add(self.txtPrizeShow, 0, 0, 0)
        sizer_prize_lab.Add((80, 34), 1, 0, 0)
        sizer_prize.Add(sizer_prize_lab, 1, wx.EXPAND, 0)
        sizer_grid_prize.Add(self.gridPrize, 1, wx.EXPAND, 0)
        sizer_prize.Add(sizer_grid_prize, 20, wx.EXPAND, 0)
        self.pane_prize.SetSizer(sizer_prize)
        self.sizer_top_notebook.AddPage(self.pane_nonstandar, u"非标台账表")
        self.sizer_top_notebook.AddPage(self.pane_send, u"生产安装表")
        self.sizer_top_notebook.AddPage(self.pane_prize, u"安装奖表")
        sizer_top.Add(self.sizer_top_notebook, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_top)
        self.Layout()
        # end wxGlade
    
    # 通用方法
    # 判断文件是否存在
    # 参数：
    #    li: 文件全路径名列表，以split('\')得到的列表
    #    strFileName: 指定的字符串常量文件名
    # 返回值:
    #    False: 全路径列表中没有指定的文件名
    #    True: 全路径列表中有指定的文件名
    def file_is_exist( self , strPathname , strFileName ):
        '''判断文件是否存在'''
        if os.path.exists(strPathname):
            #判断操作系统类型
            if (platform.system() == "Windows"):
                liTemp = strPathname.split("\\")
            elif (platform.system() == "Linux"):
                liTemp = strPathname.split("/")
            intFlag = len( strFileName )
            if liTemp[-1]:
                for item in liTemp[-1]:
                    if item in strFileName:
                        intFlag -= 1
                    else:
                        return False
                if not intFlag:
                    print("可以打开文件:%s"% strFileName)
                    return True
        return False
        
    def txtNonStandar_OnChange(self, event):  # wxGlade: MyFrame.<event_handler>
        strPathName = self.txtNonStandar.GetValue()
        #判断是否为指定文件
        if self.file_is_exist( strPathName , NonStandard.strFILENAME ):
            # 读取2018非标台账表的内容
            nonstandar_excel = NonStandard(strPathName)
            nonstandar_excel.objWorkBook = nonstandar_excel.get_obj_workbook()
            non_objSheet = nonstandar_excel.get_obj_sheet(nonstandar_excel.objWorkBook,nonstandar_excel.get_sheet_names(nonstandar_excel.objWorkBook)[0])
            nonstandar_excel.get_nrows_ncols(non_objSheet)
            # 读入"非标台账表"内容
            for n_row in range(nonstandar_excel.STARTROW,nonstandar_excel.nrows):
                for n_col in range(nonstandar_excel.STARTCOL,nonstandar_excel.ncols-2):
                    ctype_flag = nonstandar_excel.get_cell_ctype(non_objSheet,n_row,n_col)
                    if ctype_flag == 0:   # empty
                        nonstandar_excel.list_row.append('' )
                        continue
                    elif ctype_flag == 1:  # string
                        nonstandar_excel.list_row.append(nonstandar_excel.get_cell_value(non_objSheet,n_row,n_col))
                        continue
                    elif ctype_flag == 2:  # number
                        nonstandar_excel.list_row.append(str(nonstandar_excel.get_cell_value(non_objSheet,n_row,n_col)))
                        continue
                    elif ctype_flag == 3:  # date
                        nonstandar_excel.list_row.append(nonstandar_excel.date_to_str(nonstandar_excel.get_cell_value(non_objSheet,n_row,n_col),nonstandar_excel.objWorkBook))
                        continue
                    #elif ctype_flag == 4:  # boolean
                        #pass
                    #elif ctype_flag == 5:  # error
                        #pass
                nonstandar_excel.list_table.append(copy.deepcopy(nonstandar_excel.list_row))
                NonStandard.list_global = nonstandar_excel.list_table
                nonstandar_excel.list_row.clear()
                
            # 将每行数据写入gridNonStandar控件
            row_num = 0   # 记录行数
            for liItem in nonstandar_excel.list_table:
                for num in range(nonstandar_excel.STARTCOL,nonstandar_excel.ncols-2):
                    self.gridNonStandar.SetCellValue(row_num, num, liItem[num])
                row_num += 1
                self.gridNonStandar.AppendRows(numRows=1, updateLabels=True)
        #print("Event handler 'txtNonStandar_OnChange' implemented!")
        event.Skip()

    def btnNonStandar_Down(self, event):  # wxGlade: MyFrame.<event_handler>
        strFilterFile = "*.*"   # 过滤文件
        dlg = wx.FileDialog(None,u"选择文件",os.getcwd(),"",strFilterFile,style=wx.FD_OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.txtNonStandar.SetValue(dlg.GetPath())
        dlg.Destroy()
        #print("Event handler 'btnNonStandar_Down' implemented!")
        event.Skip()
        
    def btnNonStandar_DownW(self,event):
        pass
        
    def gridNonStandar_OnClick(self,event):
        nrow = event.GetRow()
        ncol = event.GetCol()
        self.txtNonStandarShow.SetValue( self.gridNonStandar.GetCellValue ( nrow, ncol) )
        
        
    def txtSend_OnChange(self, event):  # wxGlade: MyFrame.<event_handler>
        strPathName = self.txtSend.GetValue()
        #判断是否为指定文件
        if self.file_is_exist( strPathName , Send.strFILENAME ) :
            # “生产、安装报表”
            send_excel = Send(strPathName)
            send_excel.objWorkBook = send_excel.get_obj_workbook()
            send_excel.list_sheet_name = send_excel.get_sheet_names(send_excel.objWorkBook)
            send_excel.list_sheet_name.remove(Send.strSHEETNAME)
            
            row_num = 0   # 用于写入grid控件时记录行数    
            # 按sheet name 循环读取表的内容
            for item in send_excel.list_sheet_name:
                send_objSheet = send_excel.get_obj_sheet( send_excel.objWorkBook , item )
                send_excel.get_nrows_ncols( send_objSheet )
                print("========>> %s" % item)
                
                # 读"生产、安装报表"内容
                for n_row in range( send_excel.STARTROW , send_excel.nrows ):
                    for n_col in range( send_excel.STARTCOL , send_excel.ncols ):
                        ctype_flag = send_excel.get_cell_ctype( send_objSheet , n_row , n_col )
                        if ctype_flag == 0:   # empty
                            send_excel.list_row.append('' )
                            continue
                        elif ctype_flag == 1:  # string
                            send_excel.list_row.append( send_excel.get_cell_value( send_objSheet , n_row , n_col ))
                            continue
                        elif ctype_flag == 2:  # number
                            strTemp = str( send_excel.get_cell_value( send_objSheet , n_row , n_col ) )
                            if '.' in strTemp:
                                strTemp = strTemp[:-2]
                            send_excel.list_row.append( strTemp)
                            continue
                        elif ctype_flag == 3:  # date
                            send_excel.list_row.append( send_excel.date_to_str( send_excel.get_cell_value( send_objSheet , n_row , n_col ) , send_excel.objWorkBook ))
                            continue
                        #elif ctype_flag == 4:  # boolean
                            #pass
                        #elif ctype_flag == 5:  # error
                            #pass
                    send_excel.list_table.append(copy.deepcopy(send_excel.list_row))
                    send_excel.list_row.clear()
                    
                    # 由send表里选出符合条件的记录，li_non[16]是发货时间
                for li_non in NonStandard.list_global:
                    for liItem in send_excel.list_table:
                        if ( li_non[2] in liItem[2] ) and ( not li_non[16].strip() ) :
                            send_excel.list_grid.append(copy.deepcopy(liItem))
                     
                send_excel.list_table.clear()
                     
                    # 将符合条件的记录写入grid控件
                for liitem in send_excel.list_grid:
                    self.gridSend.SetCellValue( row_num, 0, item )
                    for num in range(send_excel.STARTCOL , send_excel.ncols ):
                        self.gridSend.SetCellValue(row_num, num+1 , liitem[num])
                    row_num += 1
                    self.gridSend.AppendRows(numRows=1, updateLabels=True)
                    
                send_excel.list_grid.clear()
                            
        #print("Event handler 'txtSend_OnChange' not implemented!")
        event.Skip()

    def btnSend_Down(self, event):  # wxGlade: MyFrame.<event_handler>
        strFilterFile = "*.*"   # 过滤文件
        dlg = wx.FileDialog(None,u"选择文件",os.getcwd(),"",strFilterFile,style=wx.FD_OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.txtSend.SetValue(dlg.GetPath())
        dlg.Destroy()
        #print("Event handler 'btnSend_Down' not implemented!")
        event.Skip()
        
    def btnSend_DownW(self,event):
        pass

    def gridSend_OnClick(self,event):
        nrow = event.GetRow()
        ncol = event.GetCol()
        self.gridSend.SetGridCursor( nrow, ncol )
        self.txtSendShow.SetValue( self.gridSend.GetCellValue ( nrow, ncol) )

    def txtPrize_OnChange(self, event):  # wxGlade: MyFrame.<event_handler>
        strPathName = self.txtPrize.GetValue()
        #判断是否为指定文件
        if self.file_is_exist( strPathName , Prize.strFILENAME ) :
            # “安装奖统计表”
            prize_excel = Prize(strPathName)
            prize_excel.objWorkBook = prize_excel.get_obj_workbook()
            prize_excel.list_sheet_name = prize_excel.get_sheet_names( prize_excel.objWorkBook )
            for it in Prize.list_SHEETNAME :
                prize_excel.list_sheet_name.remove( it )
            
            row_num = 0   # 记录写入grid控件时的行数    
            # 按sheet name 循环读取表的内容
            for item in prize_excel.list_sheet_name:
                prize_objSheet = prize_excel.get_obj_sheet( prize_excel.objWorkBook , item )
                prize_excel.get_nrows_ncols( prize_objSheet )
                print("========>> %s" % item)
                
                # 读"安装奖统计表"每页Sheet的内容
                for n_row in range( prize_excel.STARTROW , prize_excel.nrows ):
                    for n_col in range( prize_excel.STARTCOL , prize_excel.ncols ):
                        # 跳过没有数据的行
                        if n_col == 0:
                            if prize_excel.get_cell_value( prize_objSheet , n_row , n_col ) == '' :
                                break
                        # 判断每个单元格的数据类型，并最终转换成字符串保存到 list_row
                        ctype_flag = prize_excel.get_cell_ctype( prize_objSheet , n_row , n_col )
                        if ctype_flag == 0:   # empty
                            prize_excel.list_row.append('' )
                            continue
                        elif ctype_flag == 1:  # string
                            prize_excel.list_row.append( prize_excel.get_cell_value( prize_objSheet , n_row , n_col ))
                            continue
                        elif ctype_flag == 2:  # number
                            strTemp = str( prize_excel.get_cell_value( prize_objSheet , n_row , n_col ) )
                            if '.' in strTemp:
                                strTemp = strTemp[:-2]
                            prize_excel.list_row.append( strTemp)
                            continue
                        elif ctype_flag == 3:  # date
                            prize_excel.list_row.append( prize_excel.date_to_str( prize_excel.get_cell_value( prize_objSheet , n_row , n_col ) , prize_excel.objWorkBook ))
                            continue
                        #elif ctype_flag == 4:  # boolean
                            #pass
                        #elif ctype_flag == 5:  # error
                            #pass
                            
                    #  Prize.list_global 存储所有的安装奖记录
                    prize_excel.list_table.append(copy.deepcopy(prize_excel.list_row))
                    prize_excel.list_row.clear()
                    
                    # 选出符合条件的记录，li_non[15]是安装奖发放日期，即项目完工时间
                for li_non in NonStandard.list_global:
                    for liItem in prize_excel.list_table:
                        if liItem :
                            if ( li_non[2] in liItem[2] ) and ( not li_non[15].strip() ) :
                                prize_excel.list_grid.append(copy.deepcopy(liItem))
                                
                prize_excel.list_table.clear()
                     
                    # 将符合条件的记录写入grid控件
                for liitem in prize_excel.list_grid:
                    self.gridPrize.SetCellValue( row_num, 0, item )
                    for num in range(prize_excel.STARTCOL , prize_excel.ncols ):
                        self.gridPrize.SetCellValue(row_num, num+1 , liitem[num])
                    row_num += 1
                    self.gridPrize.AppendRows(numRows=1, updateLabels=True)
                    
                prize_excel.list_grid.clear()
                    
        #print("Event handler 'txtPrize_OnChange' not implemented!")
        event.Skip()

    def btnPrize_Down(self, event):  # wxGlade: MyFrame.<event_handler>
        strFilterFile = "*.*"   # 过滤文件
        dlg = wx.FileDialog(None,u"选择文件",os.getcwd(),"",strFilterFile,style=wx.FD_OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.txtPrize.SetValue(dlg.GetPath())
        dlg.Destroy()
        #print("Event handler 'btnPrize_Down' not implemented!")
        event.Skip()

    def btnPrize_DownW(self,event):
        pass

    def gridPrize_OnClick(self,event):
        nrow = event.GetRow()
        ncol = event.GetCol()
        self.gridPrize.SetGridCursor( nrow, ncol )
        self.txtPrizeShow.SetValue( self.gridPrize.GetCellValue ( nrow, ncol) )

# end of class MyFrame

class GuiExcel(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class GuiExcel


if __name__ == "__main__":
    egui = GuiExcel(0)
    egui.MainLoop()
